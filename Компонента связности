#include <iostream>
#include <vector>

using namespace std;

vector<vector<int> > components;

void input(int n,int arr[][2])
{
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < 2; j++)
        {
            cin >> arr[i][j];
        }
    }
}

void create_adjacency_matrix(int n, int m, int arr[][2], bool **arr2)
{
    for(int i =0; i < m; i++)
    {
        for(int j = 0; j < m; j++)
        {
            arr2[i][j] = 0;
        }
    }

    for(int i = 0; i < n; i++)
    {
        arr2[arr[i][0]-1][arr[i][1]-1] = 1;
        arr2[arr[i][1]-1][arr[i][0]-1] = 1;
    }
}

void DFS(bool **arr, int n, int start, bool used[])
{
    used[start] = 1;
    components.back().push_back(start);

    for(int i = 1; i < n; i++)
    {
        if(arr[start][i] && !used[i])
        {
            DFS(arr,n,i,used);
        }
    }
}

int main()
{
    int NumberOfVerticies;
    int NumberOfRibs;

    cin >> NumberOfVerticies;
    cin >> NumberOfRibs;

    int EdgeList[NumberOfRibs][2];

    input(NumberOfRibs, EdgeList);

    bool **AdjacencyMatrix = new bool*[NumberOfVerticies];
    bool used[NumberOfVerticies];

    for(int i = 0; i < NumberOfVerticies; i++)
    {
        used[i] = 0;
    }

    for(int i = 0; i < NumberOfVerticies; i++)
    {
        AdjacencyMatrix[i] = new bool[NumberOfVerticies];
    }

    create_adjacency_matrix(NumberOfRibs, NumberOfVerticies, EdgeList, AdjacencyMatrix);

    for(int i = 0; i < NumberOfVerticies; i++)
    {
        if(!used[i])
        {
            components.push_back(vector<int>());
            DFS(AdjacencyMatrix, NumberOfVerticies, i, used);
    }
    }

    for(vector<vector<int> >::iterator it = components.begin(); it != components.end(); ++it)
    {
        for(vector<int>::iterator it2 = (*it).begin(); it2 != (*it).end(); ++it2)
        {
            cout << *it2+1 << " ";
        }
        cout << endl;
    }

    for (int i = 0; i < NumberOfVerticies; i++)
    {
        delete[] AdjacencyMatrix[i];
    }

    return 0;
}
